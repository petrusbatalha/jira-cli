metadata:
  project: ESTRT
  components:
    - enge-cloud
  epic: ESTRT-1055
  team: engenhariacloud
  labels:
    - H2
stories:
  - name: |
        [Quarkus] Mapear facilitadores para Kubernetes.
    point: 0
    description: |
      [Para Refinamento]
        Quais facilitadores disponíveis para uso no Kubernetes?
        Leitura de configmap ?
        Leitura de Secrets ?
        Reload de configurações ?
        Compatibilidade com log na Cloud ?

      DoD: Documentação no Confluence.
  - name: |
        [Quarkus] Mapear dependencias necessárias para uso do Quarkus.
    point: 0
    description: |
      [Para Refinamento]
        - Mapear as dependencias para as diferentes implementações do Quarkus [GraalVM, JVM, Nativo].

      DoD: Documentação no Cockroach.
  - name: |
      [Quarkus] Mapear compatibilidade para comunicação com o IBM Db2.
    point: 0
    description: |
      [Para Refinamento]
        - Mecanismos disponíveis para comunicação com o IBM Db2.

      DoD: Documentação no Confluence.
  - name: |
      [Quarkus] Mapear facilitadores para uso de Base de Dados [Semelhante ao Spring Data].
    point: 0
    description: |
      - Mapear facilitadores para uso de Bases de Dados existentes para o Quarkus.
      - Facilitador para Redis?
      - Facilitador para MongoDB?
      - Facilitador para CockroachDB?

      DoD: Documentação no Confluence.
  - name: |
      [Quarkus] Compatibilidade com connector CWS.
    point: 0
    description: |
      Avaliar a compatibilidade do framework com o connector CWS, 
      elencando se é plausível a sua adaptação, ou se é o esforço é muito grande.
      DoD: <digite-o-definition-of-done>
  - name: |
      [Quarkus] Compatibilidade com IBM Event Streams.
    point: 0
    description: |
      Avaliar as opções de bibliotecas Kafka para o Quarkus.
      DoD: <digite-o-definition-of-done>
  - name: |
      [Quarkus] Compatibilidade com estrutural de log.
    point: 0
    description: |
      Avaliar a compatibilidade da biblioteca estrutural de log com o Quarkus,
      elencando se é plausível a sua adaptação, ou se é o esforço é muito grande.
      DoD: <digite-o-definition-of-done>
  - name: |
      [Quarkus] Compatibilidade com pipeline DevSecOps.
    point: 0
    description: |
      Avaliar a compatibilidade de microsserviços Quarkus com a Esteira DevSecOps.
      - Execução de teste unitários, é compatível com JUnit? Surefire? 
      - Compatível com o gateway de qualidade de código do Sonar?
      - Compatível com as métricas do fortify?
      DoD: <digite-o-definition-of-done>
  - name: |
      [Quarkus] Compatibilidade do Quarkus nativo com pipeline DevSecOps.
    point: 0
    description: |
      Avaliar a compatibilidade de microsserviços Quarkus no modo Nativo com a Esteira DevSecOps.
      - Execução de teste unitários, é compatível com JUnit? Surefire? 
      - Compatível com o gateway de qualidade de código do Sonar?
      - Compatível com as métricas do fortify?

      DoD: <digite-o-definition-of-done>
  - name: |
      [Quarkus] Avaliar performance Quarkus GraalVM VS Quarkus JVM VS Quarkus Nativo.
    point: 0
    description: |
      Para evitar bloqueios da disponibilização do modo nativo do Quarkus na esteira DevSecOps, 
      pode-se avaliar a execução dos testes em outro ambiente, pois a imagem utilizada será 
      a mesma que utilizariamos na esteira, portanto a diferença de performance entre os metodos
      não apresentaria uma diferença significativa.

      DoD: <digite-o-definition-of-done>
  - name: |    
      Requisitar pipeline para os serviços do Real World.
    point: 0
    description: | 
      Requisitar a pipeline para os serviços: 
        enge-srv-micronaut-converte-moedas
        enge-srv-quarkus-converte-moedas
        enge-srv-spring-moedas

      DoD: Requisicao da pipeline realizada.
  - name: |
      [Quarkus] Desenvolvimento rota GET enge-srv-quarkus-converte-moedas/api/moedas/origem/destino/valor
    point: 0
    description: |
       A rota deverá receber uma moeda de origem, uma moeda de destino e um valor.
       Chamará o microsserviço enge-srv-spring-moedas buscando a cotação das moedas recebidas.
       Realizará o parse do retorno do enge-srv-spring-moedas, calculando a conversão e retornando
       o valor para o usuário.
       
       Exemplo: 
        Dado que:
          [origem] = Libras
          [destino] = Real
          [valor] = 50
        Chamará: 
          GET enge-srv-spring-moedas/api/moedas/Libras/Real
        Receberá: 
          Libra: 4.00
          Real: 1.00
        Retornará: 
          { "valor": 200}

        OBS: A história deverá incluir os testes unitários para a rota.

        DoD: Rota desenvolvida com os seus devidos testes unitários.
  - name: |
      [Quarkus] Desenvolvimento rota POST enge-srv-quarkus-converte-moedas/api/moeda/conversoes
    point: 0
    description: |
       A rota deverá receber no body da requisição, uma moeda de origem, um valor e uma lista de moedas de destino.
       Chamará o microsserviço enge-srv-spring-moedas buscando a cotação das moedas recebidas.
       Realizará o parse do retorno do enge-srv-spring-moedas, calculando a conversão
       para cada uma das moedas de destino.

       Exemplo: 
        Dado que payload:
        { 
          "origem": "Libras",
          "destino": ["Real", "Pesos", "Ien"],
          "valor": 50
        }
        Chamará: 
          GET enge-srv-spring-moedas/api/moedas/Libras/Real
        Receberá: 
          Libra: 4.00
          Real: 1.00
        Retornará: 
          { "valor": "200 reais"}

        OBS: A história deverá incluir os testes unitário da rota.

        DoD: Rota desenvolvida com os seus devidos testes unitários.
  - name: |
        [Quarkus] Adicionando Métricas/Healthcheck/Swagger.
    point: 0
    description: |
        - Adicionar a especificação OpenApi para as rotas do microsserviço.
        - Adicionar rota de healthcheck usando alguma implementação disponível para Quarkus (Sugestão SmallRye)
        - Adicionar rota para expor métricas do microsserviço usando alguma implementação disponível para Quarkus,
        padrão prometheus.

        DoD: Caracteristicas implementadas e testadas.
  - name: |
        [Quarkus] Adequação esteira DevSecOps.
    point: 0
    description: |
        - Adaptar o serviço para a esteira DevSecOps. 
        - Alterar o pom.xml do Quarkus para a esteira DevSecOps.
        - Adaptar o codigo para passar no Quality Gate do Sonar caso necessário.
        - Adaptar a imagem docker de acordo com as melhores práticas para Quarkus.
        - Criação dos testes do Octane.

        DoD: Microsserviço nos ambientes de Desenvolvimento.
  - name: |
        [Quarkus] Utilizar a GraalVM para o microsserviço.
    point: 0
    description: |
        - Adaptar o serviço para utilização da GraalVM.
        - Fazer build de imagem docker utilizando a GraalVM.

        DoD: Imagem docker criada com a GraalVM e testes realizados.
  - name: |
        [Quarkus] Adaptar o microsserviço para o modo nativo do Quarkus.
    point: 0
    description: |
        - Adaptar o serviço para compilar para código nativo.
        - Criar os testes unitários do modo nativo.
        - Fazer build de imagem docker com o código nativo.

        DoD: Imagem docker criada contendo o binário da aplicação e testes realizados.